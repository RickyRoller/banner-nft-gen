{"version":3,"sources":["components/tile/tile.module.scss","components/controls/controls.module.scss","components/control/control.module.scss","App.module.scss","components/header/header.module.scss","components/control/pfp-selector/pfp-selector.module.scss","components/control/rand-gen/rand-gen.module.scss","components/template-selector/template-selector.module.scss","components/banner-svg/banner-svg.module.scss","components/control/pfp-selector/pfp-selector-modal/pfp-selector-modal.module.scss","components/mint-modal/mint-modal.module.scss","components/banner-gen/banner-gen.module.scss","components/modal/modal.module.scss","models/templates.ts","components/tile/tile.tsx","banner-templates/templateVars.ts","models/controls.ts","template-components/pfp.tsx","template-components/gen-1.tsx","banner-templates/PFP-Left.ts","banner-templates/index.ts","state/app/selectors.ts","utils/spline.ts","models/WalletStatus.ts","template-components/line-pattern.tsx","utils/helpers.ts","components/banner-svg/banner-svg.tsx","components/control/control.tsx","components/control/range-control/range-control.tsx","state/app/actions.ts","components/services/wallet.ts","hooks/useModal.tsx","components/modal/modal.tsx","hooks/modalContext.tsx","components/services/open-sea.ts","components/control/pfp-selector/pfp-selector-modal/pfp-selector-modal.tsx","components/control/pfp-selector/pfp-selector.tsx","components/control/rand-gen/rand-gen.tsx","components/control/toggle/toggle.tsx","components/controls/controls.tsx","components/template-selector/template-selector.tsx","components/services/ipfs.ts","components/services/mint-service.ts","components/mint-modal/mint-modal.tsx","components/banner-gen/banner-gen.tsx","components/header/header.tsx","App.tsx","state/app/index.ts","state/store.ts","index.tsx"],"names":["module","exports","TemplateObjectTypes","CutoutType","Tile","children","className","cx","styles","bannerWidth","bannerHeight","ControlTypes","id","NFTHeight","genSeed","genBackgrounds","svg","root","leaf","selectAll","data","leaves","join","attr","d","x0","y0","i","configInd","Math","round","d3","randConfig","genPolygon","append","randColor","style","genLayer","leafUid","v4","x1","y1","opacityScale","clipUid","href","override","width","height","size","randCorner","index","genData","layerRanges","Array","from","length","genCell","layer","childrenBase","map","name","value","color","range","treemap","tile","padding","sum","sort","a","b","domain","gen1","type","GEN_1","title","controls","RandGen","objectId","property","default","PFPSelector","PFP","Toggle","NumberSlider","min","max","initPFPSelector","TemplatesMap","PFPLeft","key","objects","selectTemplateId","state","app","templateId","selectTemplate","createSelector","undefined","selectControlsState","controlsState","selectUserAddress","userAddress","selectWalletStatus","walletStatus","formatPoints","points","close","isArray","x","y","lastPoint","secondToLastPoint","firstPoint","secondPoint","unshift","push","flat","WalletStatus","renderLinePattern","patternId","spread","angle","strokeWidth","linePoints","noise","colWidth","rowHeight","ceil","paths","fill","randomNoise","randomUniform","baseSpline","tension","cb","last","startPointX","startPointY","path","maxIteration","inc","x2","y2","cp1x","cp1y","cp2x","cp2y","spline","stroke","transform","objectControlId","prop","convertSVGToDataURI","Promise","resolve","reject","timeout","setTimeout","blob","Blob","outerHTML","blobURL","URL","createObjectURL","image","Image","onload","canvas","document","createElement","context","getContext","drawImage","jpg","toDataURL","clearTimeout","onerror","src","BannerSVG","svgRef","useRef","template","useSelector","useEffect","genObject","find","o","current","controlId","seed","svgNode","baseNode","select","nodes","classed","node","innerHTML","bgDataMid","z","bgDataLarge","newLayer","layerCount","layers","renderGen1","SVG","viewBox","ref","xmlns","obj","url","positionX","positionY","display","renderPFP","LINE_PATTERN","templateToSvg","Control","label","input","RangeControl","control","onChange","defaultValue","setTemplateId","createAction","deployControls","updateControlValue","connectUserWallet","createAsyncThunk","window","ethereum","request","method","addressArray","modalDataDefaults","open","onClose","Modal","useContext","modalContext","modalContent","handleModal","modal","ReactDOM","createPortal","ModalOverlay","onClick","header","CloseOutlined","body","querySelector","createContext","Provider","ModalProvider","useState","setModal","setModalContent","content","useModal","API","fetchPagedNFTs","owner","page","offset","fetch","res","json","assets","filter","image_url","PfpSelectorModal","onSelect","onCancel","setPFP","NFTs","setNFTs","loadingNFTs","setLoadingNFTs","loadNFTsByPage","selectNFT","useCallback","nft","LoadingOutlined","PFPSelectorModal","pfps","n","selected","nftLabel","pagination","footer","cancel","crossOrigin","e","ctx","disabled","noNFTs","PfpSelector","useDispatch","pfpSelected","closeModal","openModal","randGenButton","checked","setChecked","Controls","t","dispatch","updateValue","renderObjectControls","renderRangeControl","renderPFPSelector","renderRandGen","renderToggle","containers","controlGroup","templatesList","Object","values","TemplateSelector","templates","setSelected","templateList","templatePreview","primary","pinJSONToIPFS","metadata","headers","pinata_api_key","process","pinata_secret_api_key","JSON","stringify","success","pinataUrl","IpfsHash","status","contractAddress","alchemyKey","web3","createAlchemyWeb3","mintNFT","description","trim","pinataResponse","tokenURI","contract","eth","Contract","contractABI","abi","transactionParameters","to","selectedAddress","methods","encodeABI","params","txHash","message","MintService","MintModal","setName","setUrl","setDescription","creating","setCreating","mintDisabled","then","fn","target","mint","console","log","preview","form","container","placeholder","BannerGen","onTemplateSelect","left","tileStyles","subTitle","bannerGenerator","noTemplate","Header","dAddress","setDAddress","substr","userConnected","CONNECTED","connectDisabled","ERROR","CONNECTING","includes","address","connect","App","initialState","INIT","appReducer","createReducer","addCase","payload","reduce","acc","cur","ac","cr","pending","fulfilled","rejected","store","configureStore","reducer","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cecb936.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tile\":\"tile_Tile__1ccS4\",\"title\":\"tile_title__2jeIC\",\"subTitle\":\"tile_subTitle__3rhAW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"controls_Controls__ElQeb\",\"controlGroup\":\"controls_controlGroup__wi6HR\",\"title\":\"controls_title__NO-Ek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Control\":\"control_Control__1fxVt\",\"label\":\"control_label__2mfyC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"body\":\"App_body__2a4FT\",\"footer\":\"App_footer__3csul\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"header_button__1dbnp\",\"primaryButton\":\"header_primaryButton__1i8Vy\",\"secondaryButton\":\"header_secondaryButton__12w3K\",\"Header\":\"header_Header__jF7Og\",\"connect\":\"header_connect__1s8oO\",\"address\":\"header_address__3F1NE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"pfp-selector_button__1_axY\",\"primaryButton\":\"pfp-selector_primaryButton__3nVHy\",\"secondaryButton\":\"pfp-selector_secondaryButton__2m42Y\",\"PfpSelector\":\"pfp-selector_PfpSelector__trE7C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"rand-gen_button__1peoB\",\"primaryButton\":\"rand-gen_primaryButton__19fuc\",\"secondaryButton\":\"rand-gen_secondaryButton__BGoxV\",\"RandGen\":\"rand-gen_RandGen__1vW-g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"template-selector_button__yhn1E\",\"primaryButton\":\"template-selector_primaryButton__1Xtq3\",\"TemplateSelector\":\"template-selector_TemplateSelector__3b7ik\",\"footer\":\"template-selector_footer__1qtlM\",\"primary\":\"template-selector_primary__3Ocea\",\"secondaryButton\":\"template-selector_secondaryButton__3kKhN\",\"templateList\":\"template-selector_templateList__36tTS\",\"templatePreview\":\"template-selector_templatePreview__JjIeV\",\"selected\":\"template-selector_selected__10pWA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"secondaryBoxShadow\":\"banner-svg_secondaryBoxShadow__LCHhp\",\"SVG\":\"banner-svg_SVG__2FKLL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"pfp-selector-modal_button__3ED-W\",\"primaryButton\":\"pfp-selector-modal_primaryButton__Av_5V\",\"PFPSelectorModal\":\"pfp-selector-modal_PFPSelectorModal__1P_Fw\",\"footer\":\"pfp-selector-modal_footer__1-aY8\",\"select\":\"pfp-selector-modal_select__zsJRK\",\"secondaryButton\":\"pfp-selector-modal_secondaryButton__ctyPp\",\"cancel\":\"pfp-selector-modal_cancel__VMNFD\",\"centered\":\"pfp-selector-modal_centered__1o6b0\",\"noNFTs\":\"pfp-selector-modal_noNFTs__37nqf\",\"loadingNFTs\":\"pfp-selector-modal_loadingNFTs__2-Ii5\",\"pfps\":\"pfp-selector-modal_pfps__2CmKL\",\"nft\":\"pfp-selector-modal_nft__1UH4Z\",\"selected\":\"pfp-selector-modal_selected__35Gus\",\"nftLabel\":\"pfp-selector-modal_nftLabel__2l0sP\",\"name\":\"pfp-selector-modal_name__YPnr7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"mint-modal_button__1QN7z\",\"primaryButton\":\"mint-modal_primaryButton__7T8xY\",\"MintModal\":\"mint-modal_MintModal__1efXV\",\"footer\":\"mint-modal_footer__JmMxX\",\"mint\":\"mint-modal_mint__2OY48\",\"secondaryButton\":\"mint-modal_secondaryButton__26tAQ\",\"cancel\":\"mint-modal_cancel__2K7Sr\",\"input\":\"mint-modal_input__3hgCf\",\"creating\":\"mint-modal_creating__7kdrR\",\"preview\":\"mint-modal_preview__1mLiB\",\"form\":\"mint-modal_form__3WKE1\",\"container\":\"mint-modal_container__2qDPZ\",\"label\":\"mint-modal_label__OzKGQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"secondaryBoxShadow\":\"banner-gen_secondaryBoxShadow__29FPV\",\"BannerGen\":\"banner-gen_BannerGen__Phb3X\",\"noTemplate\":\"banner-gen_noTemplate__3hgPo\",\"button\":\"banner-gen_button__20Dh5\",\"primaryButton\":\"banner-gen_primaryButton__2B1Vv\",\"mint\":\"banner-gen_mint__3yPl7\",\"secondaryButton\":\"banner-gen_secondaryButton__djz9S\",\"bannerGenerator\":\"banner-gen_bannerGenerator__1DTOq\",\"header\":\"banner-gen_header__3QotU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ModalOverlay\":\"modal_ModalOverlay__1KPeT\",\"ModalContainer\":\"modal_ModalContainer__1fpIk\",\"modal\":\"modal_modal__2bhYs\",\"header\":\"modal_header__2hP-3\",\"close\":\"modal_close__1xfsJ\",\"body\":\"modal_body__2bgsT\"};","import { TemplateKeys } from 'banner-templates';\nimport { TemplateControls } from './controls';\n\nexport enum TemplateObjectTypes {\n  PFP,\n  NFT,\n  LINE_PATTERN,\n  GEN_1,\n}\n\nexport enum CutoutType {\n  CIRCLE,\n}\n\nexport interface Template {\n  key: TemplateKeys;\n  objects: TemplateObjects[];\n}\n\nexport interface BaseTemplateObject {\n  type: TemplateObjectTypes;\n  id: string;\n  title: string;\n  controls: TemplateControls;\n}\n\nexport interface TemplateObjectNFT extends BaseTemplateObject {\n  cutout: CutoutType;\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\nexport type TemplateObjects = BaseTemplateObject | TemplateObjectNFT;\n","import { FC } from 'react';\nimport styles from './tile.module.scss';\nimport cx from 'classnames';\n\ninterface Props {\n  className?: string;\n}\n\nexport const Tile: FC<Props> = ({ children, className }) => {\n  return <div className={cx(styles.Tile, className)}>{children}</div>;\n};\n","export const bannerWidth = 1500;\nexport const bannerHeight = 500;\nexport const bannerPadding = 24;\n","export interface ControlBase {\n  type: ControlTypes;\n  title: string;\n  label?: string;\n  objectId: string;\n  property: string;\n  default: any;\n}\n\nexport enum ControlTypes {\n  NumberSlider,\n  PFPSelector,\n  RandGen,\n  Toggle,\n}\n\nexport interface NumberSlider extends ControlBase {\n  min: number;\n  max: number;\n}\n\nexport type TemplateControls = (NumberSlider | ControlBase)[];\n","import { ControlTypes } from '../models/controls';\nimport { BaseTemplateObject, TemplateObjectTypes } from '../models/templates';\nimport { bannerHeight, bannerPadding } from '../banner-templates/templateVars';\n\nconst NFTHeight = bannerHeight - bannerPadding * 2;\n\nexport const initPFPSelector = (id: string): BaseTemplateObject => ({\n  type: TemplateObjectTypes.PFP,\n  id,\n  title: 'PFP Controls',\n  controls: [\n    {\n      type: ControlTypes.PFPSelector,\n      title: 'PFP Selector',\n      objectId: id,\n      property: 'url',\n      default: '',\n    },\n    {\n      type: ControlTypes.Toggle,\n      title: 'Display',\n      objectId: id,\n      property: 'display',\n      default: false,\n    },\n    {\n      type: ControlTypes.NumberSlider,\n      title: 'Height',\n      objectId: id,\n      property: 'height',\n      default: NFTHeight,\n      min: 200,\n      max: NFTHeight,\n    },\n    {\n      type: ControlTypes.NumberSlider,\n      title: 'Width',\n      objectId: id,\n      property: 'width',\n      default: NFTHeight,\n      min: 200,\n      max: NFTHeight,\n    },\n    {\n      type: ControlTypes.NumberSlider,\n      title: 'X Position',\n      objectId: id,\n      property: 'positionX',\n      default: bannerPadding,\n      min: 0,\n      max: 1000,\n    },\n    {\n      type: ControlTypes.NumberSlider,\n      title: 'Y Position',\n      objectId: id,\n      property: 'positionY',\n      default: bannerPadding,\n      min: 0,\n      max: 1000,\n    },\n  ],\n});\n\nexport type PFPControlState = {\n  id: string;\n  url: string;\n  positionX: number;\n  positionY: number;\n  height: number;\n  width: number;\n  display: boolean;\n};\n\nexport const renderPFP = ({\n  id,\n  url,\n  height,\n  width,\n  positionX,\n  positionY,\n  display,\n}: PFPControlState) => {\n  return display ? (\n    <image\n      key={id}\n      href={url}\n      height={height}\n      width={width}\n      x={positionX}\n      y={positionY}\n    />\n  ) : null;\n};\n","import * as d3 from 'd3';\nimport { bannerHeight, bannerWidth } from '../banner-templates/templateVars';\nimport { v4 } from 'uuid';\nimport { BaseTemplateObject, TemplateObjectTypes } from '../models/templates';\nimport { ControlTypes } from '../models/controls';\n\nexport const initGen1 = (id: string): BaseTemplateObject => ({\n  type: TemplateObjectTypes.GEN_1,\n  id,\n  title: 'Generative Background',\n  controls: [\n    {\n      type: ControlTypes.RandGen,\n      title: 'Regenerate',\n      objectId: id,\n      property: 'regenId',\n      default: v4(),\n    },\n  ],\n});\n\nlet genSeed = '';\n\nexport const renderGen1 = (svgNode: SVGSVGElement, seed: string) => {\n  // Only regenerate if we have a new seed\n  if (genSeed !== seed) {\n    genSeed = seed;\n  } else {\n    return;\n  }\n\n  const svg = d3.select(svgNode);\n  let baseNode: any = svg.select('.gen1');\n  if (baseNode.nodes().length === 0)\n    baseNode = svg.append('g').classed('gen1', true);\n  baseNode.node().innerHTML = '';\n  const data = { name: 'base', children: genData() };\n  const root = treemap(data);\n\n  const bgDataMid = {\n    ...data,\n    children: data.children.map((d: any) => ({\n      ...d,\n      children: d.children.map((z: any) => ({\n        ...z,\n        children: [{ name: z.name, value: 1 }],\n      })),\n    })),\n  };\n\n  let bgDataLarge = {\n    ...bgDataMid,\n    children: bgDataMid.children.map((d: any) => ({\n      ...d,\n      children: [{ name: d.name, value: d.children.length }],\n    })),\n  };\n  genBackgrounds(baseNode, treemap(bgDataLarge), 'large');\n  genBackgrounds(baseNode, treemap(bgDataMid), 'mid');\n\n  const newLayer = genLayer(baseNode, root);\n  const layerCount = d3.randomInt(3, 7);\n  const layers = Array.from({ length: layerCount() }, () => undefined);\n  opacityScale.domain([0, layers.length - 1]);\n\n  for (let i = 0; i < layers.length - 1; ++i) {\n    newLayer(i);\n  }\n};\n\nconst genBackgrounds = (svg: any, root: any, id: string) => {\n  const leaf = svg\n    .selectAll(`g[class*=\"background${id}_\"]`)\n    .data(root.leaves())\n    .join('g')\n    .attr('transform', (d: any) => `translate(${d.x0},${d.y0})`)\n    .attr('class', (d: any, i: number) => `background${id}_${i}`);\n\n  // leaf.append(\"rect\")\n  //     .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return backgroundColors(d.data.name); })\n  //     .style('opacity', 0.5)\n  //     .attr(\"width\", d => d.x1 - d.x0)\n  //     .attr(\"height\", d => d.y1 - d.y0);\n\n  const configInd = Math.round(d3.randomUniform(0, 1)());\n  const configs = [\n    [genPolygon(0), genPolygon(3)],\n    [genPolygon(1), genPolygon(2)],\n  ];\n  const randConfig = configs[configInd];\n\n  leaf\n    .append('polygon')\n    .attr('points', randConfig[0])\n    .attr('fill', randColor)\n    .style('opacity', 0.8);\n\n  leaf\n    .append('polygon')\n    .attr('points', randConfig[1])\n    .attr('fill', randColor)\n    .style('opacity', 0.8);\n};\n\nconst genLayer = (svg: any, root: any) => (id: number) => {\n  const leaf = svg\n    .selectAll(`g[class*=\"${id}_\"]`)\n    .data(root.leaves())\n    .join('g')\n    .attr('transform', (d: any) => `translate(${d.x0},${d.y0})`)\n    .attr('class', (d: any, i: number) => `${id}_${i}`);\n\n  leaf\n    .append('rect')\n    .attr('id', (d: any) => (d.leafUid = v4()))\n    .attr('fill', 'transparent')\n    .attr('width', (d: any) => d.x1 - d.x0)\n    .attr('height', (d: any) => d.y1 - d.y0);\n\n  leaf\n    .append('polygon')\n    .attr('points', genPolygon())\n    .attr('fill', randColor)\n    // .attr('strokeWidth',  d3.randomInt(0, 1))\n    // .attr('stroke', '#333')\n    .style('opacity', opacityScale(id));\n\n  leaf\n    .append('clipPath')\n    .attr('id', (d: any) => (d.clipUid = v4()))\n    .append('use')\n    .attr('xlink:href', (d: any) => d.leafUid.href);\n};\n\nconst genPolygon = (override?: number) => (d: any) => {\n  const width = d.x1 - d.x0;\n  const height = d.y1 - d.y0;\n  const size = width > height ? height : width;\n\n  const randCorner = d3.randomUniform(0, 3);\n  const index = Math.round(randCorner());\n\n  const triangles = [\n    `0,0 0,${size} ${size},0`,\n    `${width - size},0 ${width},0 ${width},${size}`,\n    `0,${height - size} 0,${height} ${size},${height}`,\n    `${width - size},${height} ${width},${height} ${width},${height - size}`,\n  ];\n\n  return triangles[override ?? index];\n};\n\nconst genData = () => {\n  const layerRanges = [\n    d3.randomInt(1, 10),\n    d3.randomInt(1, 18),\n    d3.randomInt(1, 6),\n  ];\n\n  const data = Array.from({ length: layerRanges[0]() }, () => undefined);\n\n  const genCell = (layer: number): { name: string; children: any[] } => {\n    const childrenBase = Array.from(\n      { length: layerRanges[layer]() },\n      () => undefined,\n    );\n    let children;\n    if (layer === 2) {\n      children = childrenBase.map((d: any, i: number) => ({\n        name: `${layer}_${i}`,\n        value: 1,\n      }));\n    } else {\n      children = childrenBase.map(() => genCell(layer + 1));\n    }\n\n    return {\n      name: `${layer}`,\n      children,\n    };\n  };\n\n  return data.map(() => genCell(1), {});\n};\n\nconst randColor = () => {\n  const index = d3.randomInt(0, color.range().length - 1)();\n  return color(`${index}`);\n};\n\nconst treemap = (data: any) =>\n  d3\n    .treemap()\n    .tile(d3.treemapSquarify)\n    .padding(1)\n    .size([bannerWidth, bannerHeight])\n    .round(true)(\n    d3\n      .hierarchy(data)\n      .sum((d: any) => d.value)\n      .sort((a, b) => (b.value ?? 0) - (a.value ?? 0)),\n  );\n\nconst opacityScale = d3.scaleLinear().range([0.4, 1]);\nconst color = d3\n  .scaleOrdinal()\n  .domain(['0', '1', '2', '3', '4'])\n  .range(['#bffff1', '#7cffcb', '#74f2ce', '#379634', '#0a3200']);\n","import { Template } from 'models/templates';\nimport { initLinePattern } from 'template-components/line-pattern';\nimport { bannerHeight, bannerPadding } from './templateVars';\nimport { initPFPSelector } from '../template-components/pfp';\nimport { initGen1 } from '../template-components/gen-1';\n\n// const linePattern1 = initLinePattern('Pattern1');\nconst gen1 = initGen1('gen1');\nconst PFPSelector = initPFPSelector('PFPSelector');\n\nexport const PFPLeft: Template = {\n  key: 'PFPLeft',\n  objects: [gen1, PFPSelector],\n};\n","import { Template } from 'models/templates';\nimport { PFPLeft } from './PFP-Left';\n\ninterface TempMap {\n  PFPLeft: typeof PFPLeft;\n}\n\nexport const TemplatesMap: TempMap = {\n  PFPLeft,\n};\n\nexport type TemplateKeys = keyof typeof TemplatesMap;\n","import { TemplateKeys } from 'banner-templates';\nimport { createSelector } from 'reselect';\nimport { RootState } from 'state/store';\nimport { TemplatesMap } from 'banner-templates';\n\nexport const selectTemplateId = (state: RootState) => state.app.templateId;\nexport const selectTemplate = createSelector(\n  selectTemplateId,\n  (id: TemplateKeys | null) => (id !== null ? TemplatesMap[id] : undefined),\n);\n\nexport const selectControls = (state: RootState) => state.app.controls;\nexport const selectControlsState = (state: RootState) =>\n  state.app.controlsState;\n\nexport const selectUserAddress = (state: RootState) => state.app.userAddress;\nexport const selectWalletStatus = (state: RootState) => state.app.walletStatus;\n","// https://github.com/georgedoescode/generative-utils/blob/master/src/spline.js\n\nfunction formatPoints(points: any, close: boolean) {\n  points = [...points];\n\n  if (!Array.isArray(points[0])) {\n    points = points.map(({ x, y }: { x: number; y: number }) => [x, y]);\n  }\n\n  if (close) {\n    const lastPoint = points[points.length - 1];\n    const secondToLastPoint = points[points.length - 2];\n\n    const firstPoint = points[0];\n    const secondPoint = points[1];\n\n    points.unshift(lastPoint);\n    points.unshift(secondToLastPoint);\n\n    points.push(firstPoint);\n    points.push(secondPoint);\n  }\n\n  return points.flat();\n}\n\nfunction spline(\n  points: any[] = [],\n  tension = 1,\n  close = false,\n  cb?: (msg: string, d: any) => void,\n) {\n  points = formatPoints(points, close);\n\n  const size = points.length;\n  const last = size - 4;\n\n  const startPointX = close ? points[2] : points[0];\n  const startPointY = close ? points[3] : points[1];\n\n  let path = 'M' + [startPointX, startPointY];\n\n  cb && cb('MOVE', [startPointX, startPointY]);\n\n  const startIteration = close ? 2 : 0;\n  const maxIteration = close ? size - 4 : size - 2;\n  const inc = 2;\n\n  for (let i = startIteration; i < maxIteration; i += inc) {\n    const x0 = i ? points[i - 2] : points[0];\n    const y0 = i ? points[i - 1] : points[1];\n\n    const x1 = points[i + 0];\n    const y1 = points[i + 1];\n\n    const x2 = points[i + 2];\n    const y2 = points[i + 3];\n\n    const x3 = i !== last ? points[i + 4] : x2;\n    const y3 = i !== last ? points[i + 5] : y2;\n\n    const cp1x = x1 + ((x2 - x0) / 6) * tension;\n    const cp1y = y1 + ((y2 - y0) / 6) * tension;\n\n    const cp2x = x2 - ((x3 - x1) / 6) * tension;\n    const cp2y = y2 - ((y3 - y1) / 6) * tension;\n\n    path += 'C' + [cp1x, cp1y, cp2x, cp2y, x2, y2];\n\n    cb && cb('CURVE', [cp1x, cp1y, cp2x, cp2y, x2, y2]);\n  }\n\n  return path;\n}\n\nexport { spline };\n","export enum WalletStatus {\n  INIT = 'INIT',\n  CONNECTING = 'CONNECTING',\n  CONNECTED = 'CONNECTED',\n  ERROR = 'ERROR',\n}\n","import { ControlTypes, TemplateControls } from 'models/controls';\nimport {\n  BaseTemplateObject,\n  // TemplateObjectLinePattern,\n  TemplateObjectTypes,\n} from 'models/templates';\nimport { spline } from '../utils/spline';\nimport { randomUniform } from 'd3-random';\n\nexport const initLinePattern = (id: string): BaseTemplateObject => ({\n  type: TemplateObjectTypes.LINE_PATTERN,\n  id,\n  title: 'Line Pattern Controls',\n  controls: [\n    // {\n    //   type: ControlTypes.NumberSlider,\n    //   parent: 'Pattern1',\n    //   property: 'angle',\n    //   min: 0,\n    //   max: 359,\n    // },\n    {\n      type: ControlTypes.NumberSlider,\n      title: 'Pattern spread',\n      objectId: id,\n      property: 'spread',\n      min: 4,\n      max: 24,\n      default: 12,\n    },\n    {\n      type: ControlTypes.NumberSlider,\n      title: 'Line width',\n      objectId: id,\n      property: 'strokeWidth',\n      min: 1,\n      max: 12,\n      default: 4,\n    },\n    {\n      type: ControlTypes.NumberSlider,\n      title: 'Line points',\n      objectId: id,\n      property: 'linePoints',\n      min: 4,\n      max: 60,\n      default: 45,\n    },\n    {\n      type: ControlTypes.NumberSlider,\n      title: 'Line variance',\n      objectId: id,\n      property: 'noise',\n      min: 0,\n      max: 10,\n      default: 7,\n    },\n  ],\n});\n\nexport interface LinePatternControlState {\n  patternId: string;\n  width: number;\n  height: number;\n  padding: number;\n  angle: number;\n  spread: number;\n  strokeWidth: number;\n  linePoints: number;\n  noise: number;\n}\n\nexport const renderLinePattern = ({\n  patternId,\n  width,\n  height,\n  padding,\n  angle,\n  spread,\n  strokeWidth,\n  linePoints,\n  noise,\n}: LinePatternControlState) => {\n  // const rotations = Math.floor(angle / 90);\n  // let scalePercent = angle / 90;\n  // scalePercent = scalePercent > 1 ? scalePercent - rotations : scalePercent;\n  // console.log(rotations, scalePercent);\n  const colWidth = spread + strokeWidth;\n  const rowHeight = Math.ceil(height / (linePoints - 1));\n  const paths = [];\n\n  const points = new Array(linePoints).fill(undefined);\n  const randomNoise = randomUniform(-noise, noise);\n  const splinePoints = points.map((a, i) => {\n    const randX = randomNoise();\n    return { x: randX, y: i * rowHeight };\n  });\n  const baseSpline = spline(splinePoints, 1, false);\n\n  for (let x = -padding; x <= width + padding; x += colWidth) {\n    paths.push(\n      <path\n        key={x}\n        d={baseSpline}\n        stroke=\"steelblue\"\n        strokeWidth={strokeWidth}\n        fill=\"none\"\n        transform={`translate(${x}, 0)`}\n      />,\n    );\n  }\n\n  return (\n    <g\n      key={patternId}\n      transform-origin={`${width / 2} ${height / 2}`}\n      // transform={`rotate(${angle}) scale(${1 + 5 * scalePercent})`}\n    >\n      {paths}\n    </g>\n  );\n};\n","import { bannerHeight, bannerWidth } from '../banner-templates/templateVars';\n\nexport const objectControlId = (id: string) => (prop: string) =>\n  `${id}/${prop}`;\n\nexport const convertSVGToDataURI = async (svg: Element): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => reject(), 2000);\n\n    const blob = new Blob([svg.outerHTML], {\n      type: 'image/svg+xml;charset=utf-8',\n    });\n    const blobURL = URL.createObjectURL(blob);\n\n    const image = new Image();\n\n    image.onload = () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = bannerWidth;\n      canvas.height = bannerHeight;\n      const context = canvas.getContext('2d');\n      context?.drawImage(image, 0, 0, bannerWidth, bannerHeight);\n      const jpg = canvas.toDataURL('image/jpg');\n\n      clearTimeout(timeout);\n      resolve(jpg);\n    };\n\n    image.onerror = () => reject();\n\n    image.src = blobURL;\n  });\n","import {\n  bannerHeight,\n  bannerPadding,\n  bannerWidth,\n} from 'banner-templates/templateVars';\nimport {\n  Template,\n  // TemplateObjectLinePattern,\n  TemplateObjectNFT,\n  TemplateObjectTypes,\n} from 'models/templates';\nimport { FC, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectControlsState, selectTemplate } from 'state/app/selectors';\nimport { renderLinePattern } from 'template-components/line-pattern';\nimport { objectControlId } from 'utils/helpers';\nimport styles from './banner-svg.module.scss';\nimport { renderPFP } from '../../template-components/pfp';\nimport { renderGen1 } from '../../template-components/gen-1';\n\ninterface Props {}\n\nexport const BannerSVG: FC<Props> = () => {\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const template = useSelector(selectTemplate);\n  const controlsState = useSelector(selectControlsState);\n\n  useEffect(() => {\n    const genObject = template?.objects.find(\n      (o) => o.type === TemplateObjectTypes.GEN_1,\n    );\n    if (genObject !== undefined && svgRef.current !== null) {\n      const controlId = objectControlId(genObject.id);\n      const seed = controlsState[controlId('regenId')];\n      renderGen1(svgRef.current, seed);\n    }\n  }, [template, controlsState]);\n\n  const templateToSvg = (template: Template) => {\n    return template.objects.map((obj, i) => {\n      const controlId = objectControlId(obj.id);\n      switch (obj.type) {\n        case TemplateObjectTypes.PFP:\n          return renderPFP({\n            id: obj.id,\n            url: controlsState[controlId('url')],\n            positionX: controlsState[controlId('positionX')],\n            positionY: controlsState[controlId('positionY')],\n            height: controlsState[controlId('height')],\n            width: controlsState[controlId('width')],\n            display: controlsState[controlId('display')],\n          });\n        case TemplateObjectTypes.LINE_PATTERN:\n          return renderLinePattern({\n            patternId: obj.id,\n            width: bannerWidth,\n            height: bannerHeight,\n            padding: bannerPadding,\n            angle: controlsState[controlId('angle')],\n            spread: controlsState[controlId('spread')],\n            strokeWidth: controlsState[controlId('strokeWidth')],\n            linePoints: controlsState[controlId('linePoints')],\n            noise: controlsState[controlId('noise')],\n          });\n        case TemplateObjectTypes.GEN_1:\n          return <g className=\"gen1\" />;\n      }\n    });\n  };\n\n  return (\n    <svg\n      className={styles.SVG}\n      viewBox={`0 0 ${bannerWidth} ${bannerHeight}`}\n      ref={svgRef}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <rect x=\"0\" y=\"0\" width={bannerWidth} height={bannerHeight} fill=\"#fff\" />\n      <g className=\"objects\">\n        {template !== undefined ? templateToSvg(template) : null}\n      </g>\n    </svg>\n  );\n};\n","import { FC } from 'react';\nimport styles from './control.module.scss';\n\ninterface Props {\n  title: string;\n}\n\nexport const Control: FC<Props> = ({ children, title }) => {\n  return (\n    <div className={styles.Control}>\n      <div className={styles.label}>{title}</div>\n\n      <div className={styles.input}>{children}</div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport styles from './range-control.module.scss';\nimport Slider from 'antd/lib/slider';\nimport { NumberSlider } from 'models/controls';\n\ninterface Props {\n  control: NumberSlider;\n  onChange: (val: number) => void;\n}\n\nexport const RangeControl: FC<Props> = ({ control, onChange }) => {\n  return (\n    <div className={styles.RangeControl}>\n      <Slider\n        onChange={onChange}\n        defaultValue={control.default}\n        min={control.min}\n        max={control.max}\n      />\n    </div>\n  );\n};\n","import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { TemplateKeys } from 'banner-templates';\nimport { TemplateObjects } from 'models/templates';\nimport { connectWallet } from '../../components/services/wallet';\n\nexport const setTemplateId = createAction<TemplateKeys>('app/setTemplateId');\n\nexport const deployControls =\n  createAction<TemplateObjects[]>('app/deployControls');\n\nexport const updateControlValue = createAction<{\n  property: string;\n  value: any;\n}>('app/updateControlValue');\n\nexport const connectUserWallet = createAsyncThunk(\n  'app/setUserAddress',\n  connectWallet,\n);\n\n// export const incrementAsyncThunk = createAsyncThunk(\n//   'INCREMENT_THUNK',\n//   async (amount: number, thunkAPI) =>\n//     await new Promise<number>((resolve, reject) => {\n//       setTimeout(() => {\n//         resolve(amount);\n//       }, 1000);\n//     }),\n// );\n","export const connectWallet = (): Promise<string> =>\n  new Promise(async (resolve, reject) => {\n    if (!window.ethereum) reject('');\n    const addressArray = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    resolve(addressArray[0]);\n  });\n","import { useState } from 'react';\n\nexport interface ModalData {\n  open: boolean;\n  title: string;\n  onClose: () => void;\n}\n\nexport const modalDataDefaults = {\n  open: false,\n  title: 'Modal',\n  onClose: () => {},\n};\n\nexport const useModal = () => {\n  let [modal, setModal] = useState<ModalData>(modalDataDefaults);\n  let [modalContent, setModalContent] = useState<JSX.Element | null>(null);\n\n  let handleModal = (\n    content: JSX.Element | null = null,\n    data: Partial<ModalData>,\n  ) => {\n    setModal({\n      ...modal,\n      ...data,\n    });\n    if (content !== null) {\n      setModalContent(content);\n    }\n  };\n\n  return { modal, handleModal, modalContent };\n};\n","import { useContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport { modalContext } from 'hooks/modalContext';\nimport styles from './modal.module.scss';\nimport { CloseOutlined } from '@ant-design/icons';\n\nexport const Modal = () => {\n  const { modalContent, handleModal, modal } = useContext(modalContext);\n\n  const close = () => {\n    handleModal(null, { open: false });\n    modal.onClose();\n  };\n\n  if (modal.open) {\n    return ReactDOM.createPortal(\n      <>\n        <div className={styles.ModalOverlay} onClick={close} />\n\n        <div className={styles.modal}>\n          <div className={styles.header}>\n            <span className={styles.title}>{modal.title}</span>\n            <span className={styles.close} onClick={close}>\n              <CloseOutlined />\n            </span>\n          </div>\n          <div className={styles.body}>{modalContent}</div>\n        </div>\n      </>,\n      document.querySelector('#modal-root') ?? document.body,\n    );\n  } else return null;\n};\n","import { FC, createContext } from 'react';\nimport { ModalData, modalDataDefaults, useModal } from './useModal';\nimport { Modal } from '../components/modal';\n\ninterface ModalContext {\n  modal: ModalData;\n  handleModal: (content: JSX.Element | null, data: Partial<ModalData>) => void;\n  modalContent: JSX.Element | null;\n}\n\nconst modalContext = createContext<ModalContext>({\n  modal: modalDataDefaults,\n  handleModal: () => {},\n  modalContent: null,\n});\nconst { Provider } = modalContext;\n\nconst ModalProvider: FC = ({ children }) => {\n  let { modal, handleModal, modalContent } = useModal();\n  return (\n    <Provider value={{ modal, handleModal, modalContent }}>\n      <Modal />\n      {children}\n    </Provider>\n  );\n};\n\nexport { modalContext, ModalProvider };\n","import { v4 } from 'uuid';\nimport { OpenSeaNFT } from '../../models/nft';\n\nconst API = 'https://rinkeby-api.opensea.io/api/v1';\nconst perPage = 18;\n\nexport const fetchPagedNFTs = async (\n  owner: string,\n  page: number = 0,\n): Promise<OpenSeaNFT[]> => {\n  const offset = page * perPage;\n  const res = await fetch(\n    `${API}/assets?owner=${owner}&offset=${offset}&limit=${perPage}`,\n  );\n  const { assets } = await res.json();\n  return assets\n    .filter((d: any) => d.image_url !== '')\n    .map((d: any) => ({\n      id: v4(),\n      url: d.image_url,\n      name: d.name,\n    }));\n};\n","import { FC, useCallback, useEffect, useState } from 'react';\nimport styles from './pfp-selector-modal.module.scss';\nimport { fetchPagedNFTs } from '../../../services/open-sea';\nimport { useSelector } from 'react-redux';\nimport { selectUserAddress } from '../../../../state/app/selectors';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport cx from 'classnames';\nimport { OpenSeaNFT } from '../../../../models/nft';\n\ninterface Props {\n  onSelect: (url: OpenSeaNFT) => void;\n  onCancel: () => void;\n}\n\nexport const PfpSelectorModal: FC<Props> = ({ onSelect, onCancel }) => {\n  const userAddress = useSelector(selectUserAddress);\n  const [PFP, setPFP] = useState<OpenSeaNFT | undefined>();\n  const [NFTs, setNFTs] = useState<OpenSeaNFT[]>([]);\n  const [page, setPage] = useState<number>(0);\n  const [loadingNFTs, setLoadingNFTs] = useState<boolean>(true);\n\n  useEffect(() => {\n    loadNFTsByPage();\n  }, []);\n\n  const selectNFT = useCallback(\n    (nft: OpenSeaNFT) => () => {\n      setPFP(nft);\n    },\n    [],\n  );\n\n  const loadNFTsByPage = async () => {\n    setLoadingNFTs(true);\n    const data = await fetchPagedNFTs('', page);\n    setNFTs(data);\n    setLoadingNFTs(false);\n  };\n\n  const confirm = () => {\n    if (PFP !== undefined) {\n      const image = new Image();\n      image.crossOrigin = 'anonymous';\n\n      image.onload = (e) => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        ctx?.drawImage(image, 0, 0);\n\n        onSelect({\n          ...PFP,\n          url: canvas.toDataURL('image/jpeg'),\n        });\n      };\n\n      image.src = PFP.url;\n    }\n  };\n\n  if (loadingNFTs)\n    return (\n      <div className={styles.loadingNFTs}>\n        <LoadingOutlined />\n      </div>\n    );\n\n  if (!loadingNFTs && NFTs.length === 0)\n    return (\n      <div className={styles.noNFTs}>\n        <span>There aren't any NFTs in this wallet :(</span>\n      </div>\n    );\n\n  return (\n    <div className={styles.PFPSelectorModal}>\n      <div className={styles.pfps}>\n        {NFTs.map((n: OpenSeaNFT) => (\n          <div\n            className={cx(styles.nft, { [styles.selected]: n.id === PFP?.id })}\n            key={n.id}\n            onClick={selectNFT(n)}\n          >\n            <img src={n.url} />\n            <div className={styles.nftLabel}>\n              <span className={styles.name}>{n.name}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className={styles.pagination}>\n        <span>{'<'}</span>\n        <span>{page + 1}</span>\n        <span>{'>'}</span>\n      </div>\n\n      <div className={styles.footer}>\n        <button className={styles.cancel} onClick={onCancel}>\n          Cancel\n        </button>\n        <button\n          className={styles.select}\n          onClick={confirm}\n          disabled={PFP === undefined}\n        >\n          Select\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { FC, useContext } from 'react';\nimport styles from './pfp-selector.module.scss';\nimport { ControlBase } from '../../../models/controls';\nimport { modalContext } from '../../../hooks/modalContext';\nimport { PfpSelectorModal } from './pfp-selector-modal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectUserAddress } from '../../../state/app/selectors';\nimport { connectUserWallet } from '../../../state/app/actions';\nimport { OpenSeaNFT } from '../../../models/nft';\n\ninterface Props {\n  control: ControlBase;\n  onSelect: (url: string) => void;\n}\n\nexport const PfpSelector: FC<Props> = ({ control, onSelect }) => {\n  const dispatch = useDispatch();\n  const userAddress = useSelector(selectUserAddress);\n  const { handleModal } = useContext(modalContext);\n\n  const pfpSelected = ({ url }: OpenSeaNFT) => {\n    onSelect(url);\n    closeModal();\n  };\n\n  const openModal = async () => {\n    // if (userAddress === '') {\n    //   await dispatch(connectUserWallet());\n    // }\n\n    handleModal(\n      <PfpSelectorModal onSelect={pfpSelected} onCancel={closeModal} />,\n      {\n        open: true,\n        title: 'Select one of your amazing PFPs',\n      },\n    );\n  };\n\n  const closeModal = () => {\n    handleModal(null, { open: false });\n  };\n\n  return (\n    <div className={styles.PfpSelector}>\n      <button className={styles.openModal} onClick={openModal}>\n        Select your PFP NFT\n      </button>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport styles from './rand-gen.module.scss';\nimport { v4 } from 'uuid';\n\ninterface Props {\n  onSelect: (id: string) => void;\n}\n\nexport const RandGen: FC<Props> = ({ onSelect }) => {\n  return (\n    <div className={styles.RandGen}>\n      <button className={styles.randGenButton} onClick={() => onSelect(v4())}>\n        Regenerate\n      </button>\n    </div>\n  );\n};\n","import { FC, useState } from 'react';\nimport styles from './toggle.module.scss';\nimport { ControlBase } from '../../../models/controls';\n\ninterface Props {\n  control: ControlBase;\n  onSelect: (checked: boolean) => void;\n}\n\nexport const Toggle: FC<Props> = ({ control, onSelect }) => {\n  const [checked, setChecked] = useState<boolean>(control.default);\n  const check = () => {\n    setChecked(!checked);\n    onSelect(!checked);\n  };\n  return (\n    <div className={styles.Toggle}>\n      <input type=\"checkbox\" checked={checked} onChange={check} />\n    </div>\n  );\n};\n","import { Control } from 'components/control';\nimport { RangeControl } from 'components/control/range-control';\nimport {\n  ControlBase,\n  ControlTypes,\n  NumberSlider,\n  TemplateControls,\n} from 'models/controls';\nimport { Template } from 'models/templates';\nimport { FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateControlValue } from 'state/app/actions';\nimport { selectTemplate } from 'state/app/selectors';\nimport { objectControlId } from 'utils/helpers';\nimport styles from './controls.module.scss';\nimport { PfpSelector } from '../control/pfp-selector';\nimport { RandGen } from '../control/rand-gen';\nimport { Toggle } from '../control/toggle';\n\ninterface Props {}\n\nexport const Controls: FC<Props> = ({}) => {\n  const dispatch = useDispatch();\n  const template = useSelector(selectTemplate);\n\n  const updateValue = (property: string) => (value: any) => {\n    dispatch(updateControlValue({ property, value }));\n  };\n\n  const renderControlGroups = (t: Template) =>\n    t.objects\n      .filter((obj) => obj.controls.length > 0)\n      .map((obj) => (\n        <div key={obj.id} className={styles.controlGroup}>\n          <div className={styles.title}>{obj.title}</div>\n          {renderObjectControls(obj.controls)}\n        </div>\n      ));\n\n  const renderObjectControls = (controls: TemplateControls) =>\n    controls.map((control) => {\n      let c;\n      const controlId = objectControlId(control.objectId)(control.property);\n      switch (control.type) {\n        case ControlTypes.NumberSlider:\n          c = control as NumberSlider;\n          return renderRangeControl(controlId, c);\n        case ControlTypes.PFPSelector:\n          c = control as ControlBase;\n          return renderPFPSelector(controlId, c);\n        case ControlTypes.RandGen:\n          c = control as ControlBase;\n          return renderRandGen(controlId, c);\n        case ControlTypes.Toggle:\n          c = control as ControlBase;\n          return renderToggle(controlId, c);\n      }\n    });\n\n  const renderRangeControl = (id: string, control: NumberSlider) => (\n    <Control key={id} title={control.title}>\n      <RangeControl control={control} onChange={updateValue(id)} />\n    </Control>\n  );\n\n  const renderPFPSelector = (id: string, control: ControlBase) => (\n    <Control key={id} title={control.title}>\n      <PfpSelector control={control} onSelect={updateValue(id)} />\n    </Control>\n  );\n\n  const renderRandGen = (id: string, control: ControlBase) => (\n    <Control key={id} title={control.title}>\n      <RandGen onSelect={updateValue(id)} />\n    </Control>\n  );\n\n  const renderToggle = (id: string, control: ControlBase) => (\n    <Control key={id} title={control.title}>\n      <Toggle control={control} onSelect={updateValue(id)} />\n    </Control>\n  );\n\n  return (\n    <div className={styles.Controls}>\n      {template !== undefined ? (\n        <>\n          <div className={styles.containers}>\n            {renderControlGroups(template)}\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n};\n","import { TemplateKeys, TemplatesMap } from 'banner-templates';\nimport { Template } from 'models/templates';\nimport { FC, useEffect, useState } from 'react';\nimport styles from './template-selector.module.scss';\nimport cx from 'classnames';\n\ninterface TemplateListItem {\n  key: TemplateKeys;\n  name: string;\n}\n\nconst templatesToList = (templates: Template[]): TemplateListItem[] =>\n  templates.map((t) => ({\n    name: t.key,\n    key: t.key,\n  }));\n\nconst templatesList = templatesToList(Object.values(TemplatesMap));\n\ninterface Props {\n  onSelect: (t: TemplateKeys) => void;\n}\n\nexport const TemplateSelector: FC<Props> = ({ onSelect }) => {\n  const [templates] = useState<TemplateListItem[]>(templatesList);\n  const [selected, setSelected] = useState<TemplateListItem | undefined>();\n\n  const confirm = () => {\n    if (selected !== undefined) {\n      onSelect(selected.key);\n    }\n  };\n\n  return (\n    <div className={styles.TemplateSelector}>\n      <div className={styles.templateList}>\n        {templates.map((t: TemplateListItem) => (\n          <div\n            className={cx(styles.templatePreview, {\n              [styles.selected]: t.key === selected?.key,\n            })}\n            key={t.key}\n            onClick={() => setSelected(t)}\n          >\n            {t.key}\n          </div>\n        ))}\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n        <div className={styles.templatePreview}>Testing</div>\n      </div>\n\n      <div className={styles.footer}>\n        <button\n          className={styles.primary}\n          disabled={selected === undefined}\n          onClick={confirm}\n        >\n          Select\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { NFTMetaData } from 'models/nft';\n\nexport const pinJSONToIPFS = async (metadata: NFTMetaData) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n  try {\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        pinata_api_key: process.env.REACT_APP_PINATA_KEY ?? '',\n        pinata_secret_api_key: process.env.REACT_APP_PINATA_SECRET ?? '',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(metadata),\n    });\n    const data = await res.json();\n    return {\n      success: true,\n      pinataUrl: 'https://gateway.pinata.cloud/ipfs/' + data.IpfsHash,\n    };\n  } catch (e) {\n    return {\n      success: false,\n      status: e,\n    };\n  }\n};\n","import { pinJSONToIPFS } from './ipfs';\nimport contractABI from 'artifacts/contracts/BannerNFT.sol/BannerNFT.json';\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3';\nconst contractAddress = '0x2e7fC63F364416099d81382392aC5B639E1428d3';\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_API ?? '';\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst loadContract = () =>\n  // @ts-ignore\n  new web3.eth.Contract(contractABI.abi, contractAddress);\n\nconst mintNFT = async (url: string, name: string, description: string) => {\n  if (url.trim() == '' || name.trim() == '' || description.trim() == '') {\n    return {\n      success: false,\n      status: '❗Please make sure all fields are completed before minting.',\n    };\n  }\n\n  const metadata = {\n    name,\n    image: url,\n    description,\n  };\n\n  const pinataResponse = await pinJSONToIPFS(metadata);\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: '😢 Something went wrong while uploading your tokenURI.',\n    };\n  }\n  const tokenURI = pinataResponse.pinataUrl;\n\n  const contract = loadContract();\n\n  try {\n    const transactionParameters = {\n      to: contractAddress, // Required except during contract publications.\n      from: window.ethereum.selectedAddress, // must match user's active address.\n      data: contract.methods\n        .mintNFT(window.ethereum.selectedAddress, tokenURI)\n        .encodeABI(),\n    };\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        '✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/' +\n        txHash,\n    };\n  } catch (error: any) {\n    return {\n      success: false,\n      status: '😥 Something went wrong: ' + error.message,\n    };\n  }\n};\n\nexport const MintService = {\n  mintNFT,\n};\n","import { ChangeEvent, FC, useEffect, useState } from 'react';\nimport styles from './mint-modal.module.scss';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport Input from 'antd/lib/input';\nimport { convertSVGToDataURI } from 'utils/helpers';\nimport { MintService } from '../services/mint-service';\n\ninterface Props {\n  onCancel: () => void;\n}\n\nexport const MintModal: FC<Props> = ({ onCancel }) => {\n  const [name, setName] = useState<string>('');\n  const [url, setUrl] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [creating, setCreating] = useState<boolean>(true);\n  const mintDisabled = name === '' || url === '' || description === '';\n\n  useEffect(() => {\n    const svg = document.querySelector('svg[class*=\"banner-svg\"]');\n    if (svg !== null) {\n      convertSVGToDataURI(svg).then(setUrl);\n    }\n  }, []);\n\n  useEffect(() => {\n    setCreating(url === '');\n  }, [url]);\n\n  const onChange =\n    (fn: (val: string) => void) =>\n    ({ target }: ChangeEvent<HTMLInputElement>) =>\n      fn(target.value);\n\n  const mint = async () => {\n    const res = await MintService.mintNFT(url, name, description);\n    console.log(res);\n  };\n\n  if (creating) {\n    return (\n      <div className={styles.creating}>\n        <LoadingOutlined />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.MintModal}>\n      <div className={styles.preview}>\n        <img src={url} />\n      </div>\n\n      <div className={styles.form}>\n        <div className={styles.container}>\n          <div className={styles.label}>Name</div>\n          <Input\n            value={name}\n            onChange={onChange(setName)}\n            placeholder=\"Set NFT name\"\n          />\n        </div>\n        <div className={styles.container}>\n          <div className={styles.label}>Description</div>\n          <Input\n            value={description}\n            onChange={onChange(setDescription)}\n            placeholder=\"Set NFT description\"\n          />\n        </div>\n      </div>\n\n      <div className={styles.footer}>\n        <button className={styles.cancel} onClick={onCancel}>\n          Cancel\n        </button>\n        <button className={styles.mint} disabled={mintDisabled} onClick={mint}>\n          Mint NFT\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { FC, useContext, useEffect } from 'react';\nimport styles from './banner-gen.module.scss';\nimport { Tile } from 'components/tile';\nimport tileStyles from 'components/tile/tile.module.scss';\nimport { BannerSVG } from 'components/banner-svg';\nimport { Controls } from 'components/controls';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectTemplate, selectTemplateId } from 'state/app/selectors';\nimport { TemplateSelector } from 'components/template-selector';\nimport { modalContext } from 'hooks/modalContext';\nimport { TemplateKeys } from 'banner-templates';\nimport { deployControls, setTemplateId } from 'state/app/actions';\nimport { MintModal } from '../mint-modal';\n\nexport const BannerGen: FC = () => {\n  const dispatch = useDispatch();\n  const templateId = useSelector(selectTemplateId);\n  const template = useSelector(selectTemplate);\n  const { handleModal } = useContext(modalContext);\n  const mintDisabled = false;\n\n  useEffect(() => {\n    if (template !== undefined) {\n      dispatch(deployControls(template.objects));\n    }\n  }, [template]);\n\n  const onTemplateSelect = (t: TemplateKeys) => {\n    closeModal();\n    dispatch(setTemplateId(t));\n  };\n\n  const openTemplateModal = () => {\n    handleModal(<TemplateSelector onSelect={onTemplateSelect} />, {\n      open: true,\n      title: 'Choose a template',\n    });\n  };\n\n  const openMintModal = () => {\n    handleModal(<MintModal onCancel={closeModal} />, {\n      open: true,\n      title: 'Mint your creation!',\n    });\n  };\n\n  const closeModal = () => {\n    handleModal(null, { open: false });\n  };\n\n  return (\n    <Tile className={styles.BannerGen}>\n      <div className={styles.header}>\n        <div className={styles.left}>\n          <div className={tileStyles.title}>Twitter banner generator</div>\n          <div className={tileStyles.subTitle}>\n            Use the controls below to generate a unique twitter banner image.\n            When you're happy with the result, mint it as an NFT!\n          </div>\n        </div>\n        <button\n          className={styles.mint}\n          disabled={mintDisabled}\n          onClick={openMintModal}\n        >\n          Mint\n        </button>\n      </div>\n\n      <div className={styles.bannerGenerator}>\n        {templateId === null ? (\n          <div className={styles.noTemplate}>\n            <button onClick={openTemplateModal}>Select a template</button>\n          </div>\n        ) : (\n          <BannerSVG />\n        )}\n      </div>\n\n      <div className={styles.controls}>\n        <Controls />\n      </div>\n    </Tile>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport styles from './header.module.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { connectUserWallet } from '../../state/app/actions';\nimport {\n  selectUserAddress,\n  selectWalletStatus,\n} from '../../state/app/selectors';\nimport { WalletStatus } from '../../models/WalletStatus';\n\nexport const Header: FC = () => {\n  const dispatch = useDispatch();\n  const walletStatus = useSelector(selectWalletStatus);\n  const userAddress = useSelector(selectUserAddress);\n  const [dAddress, setDAddress] = useState<string>('');\n\n  useEffect(() => {\n    setDAddress(`${userAddress.substr(0, 4)}...${userAddress.substr(-4)}`);\n  }, [userAddress]);\n\n  const userConnected = walletStatus === WalletStatus.CONNECTED;\n  const connectDisabled = [\n    WalletStatus.ERROR,\n    WalletStatus.CONNECTING,\n  ].includes(walletStatus);\n\n  const connect = () => {\n    dispatch(connectUserWallet());\n  };\n\n  return (\n    <div className={styles.Header}>\n      {userConnected ? (\n        <span className={styles.address}>{dAddress}</span>\n      ) : (\n        <button\n          className={styles.connect}\n          disabled={connectDisabled}\n          onClick={connect}\n        >\n          Connect Wallet\n        </button>\n      )}\n    </div>\n  );\n};\n","import { BannerGen } from 'components/banner-gen';\nimport styles from './App.module.scss';\nimport { Header } from 'components/header';\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <Header />\n\n      <div className={styles.body}>\n        <BannerGen />\n      </div>\n\n      <div className={styles.footer}>ETHOnline 2021 - suzamaki.eth</div>\n    </div>\n  );\n}\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { TemplateKeys } from 'banner-templates';\nimport { TemplateControls } from 'models/controls';\nimport { objectControlId } from 'utils/helpers';\nimport {\n  deployControls,\n  setTemplateId,\n  connectUserWallet,\n  updateControlValue,\n} from './actions';\nimport { WalletStatus } from '../../models/WalletStatus';\n\ninterface AppState {\n  templateId: TemplateKeys | null;\n  controls: TemplateControls;\n  controlsState: { [index: string]: any };\n  userAddress: string;\n  walletStatus: WalletStatus;\n}\n\nconst initialState: AppState = {\n  templateId: null,\n  controls: [],\n  controlsState: {},\n  userAddress: '',\n  walletStatus: WalletStatus.INIT,\n};\n\nconst appReducer = createReducer(initialState, (app) => {\n  app.addCase(\n    setTemplateId,\n    (state: AppState, { payload }): AppState => ({\n      ...state,\n      templateId: payload,\n    }),\n  );\n\n  app.addCase(deployControls, (state: AppState, { payload }): AppState => {\n    const controlsState = payload.reduce((acc, cur) => {\n      const controlId = objectControlId(cur.id);\n      const controls = cur.controls.reduce(\n        (ac, cr) => ({\n          ...ac,\n          [controlId(cr.property)]: cr.default,\n        }),\n        {},\n      );\n\n      return {\n        ...acc,\n        ...controls,\n      };\n    }, {});\n    return {\n      ...state,\n      controlsState,\n    };\n  });\n\n  app.addCase(\n    updateControlValue,\n    (state: AppState, { payload }): AppState => ({\n      ...state,\n      controlsState: {\n        ...state.controlsState,\n        [payload.property]: payload.value,\n      },\n    }),\n  );\n\n  app.addCase(\n    connectUserWallet.pending,\n    (state: AppState): AppState => ({\n      ...state,\n      walletStatus: WalletStatus.CONNECTING,\n    }),\n  );\n\n  app.addCase(\n    connectUserWallet.fulfilled,\n    (state: AppState, { payload }): AppState => ({\n      ...state,\n      userAddress: payload,\n      walletStatus: WalletStatus.CONNECTED,\n    }),\n  );\n\n  app.addCase(\n    connectUserWallet.rejected,\n    (state: AppState, { payload }): AppState => ({\n      ...state,\n      userAddress: '',\n      walletStatus: WalletStatus.ERROR,\n    }),\n  );\n});\n\nexport default appReducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport appReducer from './app';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './styles/index.scss';\nimport App from './App';\nimport { store } from './state/store';\nimport { Provider } from 'react-redux';\nimport { ModalProvider } from 'hooks/modalContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ModalProvider>\n        <App />\n      </ModalProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}